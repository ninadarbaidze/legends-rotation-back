generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId Int    @unique
  user   Users  @relation(fields: [userId], references: [id])
}

model Post {
  id         Int                 @id @default(autoincrement())
  createdAt  DateTime            @default(now())
  title      String
  published  Boolean             @default(false)
  authorId   Int
  categories CategoriesOnPosts[]
  author     Users               @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "Post_authorId_fkey")
}

model CategoriesOnPosts {
  postId     Int
  categoryId Int
  assignedAt DateTime @default(now())
  assignedBy String
  category   Category @relation(fields: [categoryId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])

  @@id([postId, categoryId])
  @@index([categoryId], map: "CategoriesOnPosts_categoryId_fkey")
}

model Category {
  id    Int                 @id @default(autoincrement())
  name  String
  posts CategoriesOnPosts[]
}


model WeeklyRotation {
  id Int @id @default(autoincrement())
  initialState InitialState?
}

model InitialState {
  id Int @id @default(autoincrement())
  author String
  date String
  version String
  weeklyModifier String
  initialClasses InitialClasses[]
  weeklyRotation WeeklyRotation @relation(fields: [weeklyRotationId], references: [id])
  weeklyRotationId Int @unique
  waves Waves[]

}

model InitialClasses {
  id Int @id @default(autoincrement())
  title String
  image String
  color String
  initialState InitialState @relation(fields: [initialStateId], references: [id])
  initialStateId Int
}

model Waves {
  id Int @id @default(autoincrement())
  initialState InitialState? @relation(fields: [initialStateId], references: [id])
  initialStateId Int
  spawn1 Spawn1?
  spawn2 Spawn2?
  spawn3 Spawn3?
}

model Spawn1 {
  id Int @id @default(autoincrement())
  spawnLocation String
  objective String?
  spawnOneClasses SpawnOneClasses[]
  actions Action[]
  wave Waves @relation(fields: [waveId], references: [id])
  waveId Int  @unique
}
model Spawn2 {
  id Int @id @default(autoincrement())
  spawnLocation String
  objective String? 
  spawnTwoClasses SpawnTwoClasses[]
  actions Action[]
  wave Waves @relation(fields: [waveId], references: [id])
  waveId Int  @unique
}

model Spawn3 {
  id Int @id @default(autoincrement())
  spawnLocation String
  objective String?
  spawnThreeClasses SpawnThreeClasses[]
  actions Action[]
  wave Waves @relation(fields: [waveId], references: [id])
  waveId Int @unique
}

model Action {
  id Int @id @default(autoincrement())
  name String
  spawn1   Spawn1? @relation(fields: [spawn1Id], references: [id])
  spawn1Id Int
  spawn2   Spawn2? @relation(fields: [spawn2Id], references: [id])
  spawn2Id Int
  spawn3   Spawn3? @relation(fields: [spawn3Id], references: [id])
  spawn3Id Int
}

model SpawnOneClasses {
  id Int @id @default(autoincrement())
  title String
  image String
  color String
  spawn1 Spawn1 @relation(fields: [spawn1Id], references: [id])
  spawn1Id Int
}
model SpawnTwoClasses {
  id Int @id @default(autoincrement())
  title String
  image String
  color String
  spawn2 Spawn2 @relation(fields: [spawn2Id], references: [id])
  spawn2Id Int 
}
model SpawnThreeClasses {
  id Int @id @default(autoincrement())
  title String
  image String
  color String
  spawn3 Spawn3? @relation(fields: [spawn3Id], references: [id])
  spawn3Id Int
}
