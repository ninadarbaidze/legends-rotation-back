generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model WeeklyRotation {
  id Int @id @default(autoincrement())
  initialState InitialState?
  waves Waves[]
  weeklyMap WeeklyMap? @relation(fields: [weeklyMapId], references: [id])
  weeklyMapId Int?
  }

model InitialState {
  id Int @id @default(autoincrement())
  author String
  date String
  version String
  weeklyModifier String
  isPublic Boolean @default(false)
  initialClasses InitialClasses[]
  weeklyRotation WeeklyRotation @relation(fields: [weeklyRotationId], references: [id])
  weeklyRotationId Int @unique
  @@index([weeklyRotationId])

}

model InitialClasses {
  id Int @id @default(autoincrement())
  classId Int
  title String
  image String
  color String
  initialState InitialState @relation(fields: [initialStateId], references: [id])
  initialStateId Int

  @@index([initialStateId])
}

model Waves {
  id Int @id @default(autoincrement())
  weeklyRotation WeeklyRotation? @relation(fields: [initialStateId], references: [id])
  initialStateId Int
  objective Objective?
  spawn1 Spawn1?
  spawn2 Spawn2?
  spawn3 Spawn3?

  @@index([initialStateId])
}

model Objective {
  id Int @id @default(autoincrement())
  name Int
  waves Waves @relation(fields: [waveId], references: [id])
  waveId Int @unique

  @@index([waveId])
}

model Spawn1 {
  id Int @id @default(autoincrement())
  spawnLocation String
  spawnOneClasses SpawnOneClasses[]
  spawnOneAction SpawnOneAction[]
  wave Waves @relation(fields: [waveId], references: [id])
  waveId Int  @unique
  @@index([waveId])
}
model Spawn2 {
  id Int @id @default(autoincrement())
  spawnLocation String
  spawnTwoClasses SpawnTwoClasses[]
  spawnTwoAction SpawnTwoAction[]
  wave Waves @relation(fields: [waveId], references: [id])
  waveId Int  @unique
  @@index([waveId])

}

model Spawn3 {
  id Int @id @default(autoincrement())
  spawnLocation String
  spawnThreeClasses SpawnThreeClasses[]
  spawnThreeAction SpawnThreeAction[]
  wave Waves @relation(fields: [waveId], references: [id])
  waveId Int @unique
  @@index([waveId])
}

model SpawnOneAction {
  id Int @id @default(autoincrement())
  name Int
  spawn1  Spawn1? @relation(fields: [spawn1Id], references: [id])
  spawn1Id Int
  @@index([spawn1Id])

}
model SpawnTwoAction {
  id Int @id @default(autoincrement())
  name Int
  spawn2 Spawn2 @relation(fields: [spawn2Id], references: [id])
  spawn2Id Int 
  @@index([spawn2Id])

}
model SpawnThreeAction {
  id Int @id @default(autoincrement())
  name Int
  spawn3   Spawn3? @relation(fields: [spawn3Id], references: [id])
  spawn3Id Int
  @@index([spawn3Id])

}

model SpawnOneClasses {
  id Int @id @default(autoincrement())
  classId Int
  spawn1 Spawn1? @relation(fields: [spawn1Id], references: [id])
  spawn1Id Int
  @@index([spawn1Id])

}
model SpawnTwoClasses {
  id Int @id @default(autoincrement())
  classId Int
  spawn2 Spawn2 @relation(fields: [spawn2Id], references: [id])
  spawn2Id Int 
  @@index([spawn2Id])

}
model SpawnThreeClasses {
  id Int @id @default(autoincrement())
  classId Int
  spawn3 Spawn3? @relation(fields: [spawn3Id], references: [id])
  spawn3Id Int
  @@index([spawn3Id])

}


model WeeklyMap {
  id Int @id @default(autoincrement())
  title String 
  mapId Int @unique
  locations Locations[]
  weeklyRotation WeeklyRotation[]
}

model Locations {
  id Int @id @default(autoincrement())
  location String
  weeklyMap WeeklyMap @relation(fields: [weeklyMapId], references: [id])
  weeklyMapId Int

}