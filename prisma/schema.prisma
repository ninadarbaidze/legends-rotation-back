generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model WeeklyMap {
  id Int @id @default(autoincrement())
  title String 
  mapId Int 
  locations Locations[]
  weeklyRotations WeeklyRotation[]
  }

model Locations {
  id Int @id @default(autoincrement())
  location String @db.TinyText
  weeklyMap WeeklyMap @relation(fields: [mapId], references: [id])
  mapId Int 

}
model WeeklyRotation {
  id Int @id @default(autoincrement())
  initialState InitialState?
  waves Wave[]
  weeklyMap WeeklyMap @relation(fields: [weeklyMapId], references: [id], onUpdate: Cascade)
  weeklyMapId Int
  @@unique([id])
  }

model InitialState {
  id Int @id @default(autoincrement())
  author String @db.TinyText
  date String
  version String
  weeklyModifier String @db.TinyText
  isPublic Boolean @default(false)
  initialClasses InitialClasses[]
  weeklyRotation WeeklyRotation @relation(fields: [weeklyRotationId], references: [id])
  weeklyRotationId Int @unique
  @@index([weeklyRotationId])

}

model InitialClasses {
  id Int @id @default(autoincrement())
  classId Int @db.TinyInt
  title String @db.TinyText
  image String
  color String @db.TinyText
  initialState InitialState @relation(fields: [initialStateId], references: [id])
  initialStateId Int

  @@index([initialStateId])
}

model Wave {
  id Int @id @default(autoincrement())
  weeklyRotation WeeklyRotation @relation(fields: [weeklyRotationId], references: [id])
  weeklyRotationId Int 
  objective Int? @db.TinyInt
  comment String? 
  spawns WavesOnSpawns[]
}

model Spawn {
  id Int @id @default(autoincrement())
  spawnLocation String @db.TinyText
  classes SpawnsOnClasses[]
  actions SpawnsOnAction[]
  waves WavesOnSpawns[]
}

model WavesOnSpawns {
  wave Wave @relation(fields: [waveId], references: [id])
  waveId Int
  spawn Spawn @relation(fields: [spawnId], references: [id])
  spawnId Int
  @@id([waveId, spawnId])
}


model Action {
  id Int @id @default(autoincrement())
  name Int 
  spawns SpawnsOnAction[]
}

model SpawnsOnAction {
  spawn Spawn @relation(fields: [spawnId], references: [id])
  spawnId Int
  action Action @relation(fields: [actionId], references: [id])
  actionId Int

  @@id([spawnId, actionId])

}


model Classes {
  id Int @id @default(autoincrement())
  classId Int
  spawns SpawnsOnClasses[]
}

model SpawnsOnClasses {
  spawn Spawn @relation(fields: [spawnId], references: [id])
  spawnId Int
  class Classes @relation(fields: [classId], references: [id])
  classId Int
  @@id([spawnId, classId])

}



